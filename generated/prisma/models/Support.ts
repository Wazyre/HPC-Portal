
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Support` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Support
 * 
 */
export type SupportModel = runtime.Types.Result.DefaultSelection<Prisma.$SupportPayload>

export type AggregateSupport = {
  _count: SupportCountAggregateOutputType | null
  _avg: SupportAvgAggregateOutputType | null
  _sum: SupportSumAggregateOutputType | null
  _min: SupportMinAggregateOutputType | null
  _max: SupportMaxAggregateOutputType | null
}

export type SupportAvgAggregateOutputType = {
  id: number | null
}

export type SupportSumAggregateOutputType = {
  id: number | null
}

export type SupportMinAggregateOutputType = {
  id: number | null
  email: string | null
  name: string | null
  subject: string | null
  description: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SupportMaxAggregateOutputType = {
  id: number | null
  email: string | null
  name: string | null
  subject: string | null
  description: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SupportCountAggregateOutputType = {
  id: number
  email: number
  name: number
  subject: number
  description: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SupportAvgAggregateInputType = {
  id?: true
}

export type SupportSumAggregateInputType = {
  id?: true
}

export type SupportMinAggregateInputType = {
  id?: true
  email?: true
  name?: true
  subject?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type SupportMaxAggregateInputType = {
  id?: true
  email?: true
  name?: true
  subject?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type SupportCountAggregateInputType = {
  id?: true
  email?: true
  name?: true
  subject?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SupportAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Support to aggregate.
   */
  where?: Prisma.SupportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Supports to fetch.
   */
  orderBy?: Prisma.SupportOrderByWithRelationInput | Prisma.SupportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SupportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Supports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Supports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Supports
  **/
  _count?: true | SupportCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SupportAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SupportSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SupportMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SupportMaxAggregateInputType
}

export type GetSupportAggregateType<T extends SupportAggregateArgs> = {
      [P in keyof T & keyof AggregateSupport]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSupport[P]>
    : Prisma.GetScalarType<T[P], AggregateSupport[P]>
}




export type SupportGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SupportWhereInput
  orderBy?: Prisma.SupportOrderByWithAggregationInput | Prisma.SupportOrderByWithAggregationInput[]
  by: Prisma.SupportScalarFieldEnum[] | Prisma.SupportScalarFieldEnum
  having?: Prisma.SupportScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SupportCountAggregateInputType | true
  _avg?: SupportAvgAggregateInputType
  _sum?: SupportSumAggregateInputType
  _min?: SupportMinAggregateInputType
  _max?: SupportMaxAggregateInputType
}

export type SupportGroupByOutputType = {
  id: number
  email: string
  name: string
  subject: string
  description: string
  status: string
  createdAt: Date
  updatedAt: Date
  _count: SupportCountAggregateOutputType | null
  _avg: SupportAvgAggregateOutputType | null
  _sum: SupportSumAggregateOutputType | null
  _min: SupportMinAggregateOutputType | null
  _max: SupportMaxAggregateOutputType | null
}

type GetSupportGroupByPayload<T extends SupportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SupportGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SupportGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SupportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SupportGroupByOutputType[P]>
      }
    >
  >



export type SupportWhereInput = {
  AND?: Prisma.SupportWhereInput | Prisma.SupportWhereInput[]
  OR?: Prisma.SupportWhereInput[]
  NOT?: Prisma.SupportWhereInput | Prisma.SupportWhereInput[]
  id?: Prisma.IntFilter<"Support"> | number
  email?: Prisma.StringFilter<"Support"> | string
  name?: Prisma.StringFilter<"Support"> | string
  subject?: Prisma.StringFilter<"Support"> | string
  description?: Prisma.StringFilter<"Support"> | string
  status?: Prisma.StringFilter<"Support"> | string
  createdAt?: Prisma.DateTimeFilter<"Support"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Support"> | Date | string
  comments?: Prisma.CommentListRelationFilter
}

export type SupportOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comments?: Prisma.CommentOrderByRelationAggregateInput
}

export type SupportWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SupportWhereInput | Prisma.SupportWhereInput[]
  OR?: Prisma.SupportWhereInput[]
  NOT?: Prisma.SupportWhereInput | Prisma.SupportWhereInput[]
  email?: Prisma.StringFilter<"Support"> | string
  name?: Prisma.StringFilter<"Support"> | string
  subject?: Prisma.StringFilter<"Support"> | string
  description?: Prisma.StringFilter<"Support"> | string
  status?: Prisma.StringFilter<"Support"> | string
  createdAt?: Prisma.DateTimeFilter<"Support"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Support"> | Date | string
  comments?: Prisma.CommentListRelationFilter
}, "id">

export type SupportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SupportCountOrderByAggregateInput
  _avg?: Prisma.SupportAvgOrderByAggregateInput
  _max?: Prisma.SupportMaxOrderByAggregateInput
  _min?: Prisma.SupportMinOrderByAggregateInput
  _sum?: Prisma.SupportSumOrderByAggregateInput
}

export type SupportScalarWhereWithAggregatesInput = {
  AND?: Prisma.SupportScalarWhereWithAggregatesInput | Prisma.SupportScalarWhereWithAggregatesInput[]
  OR?: Prisma.SupportScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SupportScalarWhereWithAggregatesInput | Prisma.SupportScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Support"> | number
  email?: Prisma.StringWithAggregatesFilter<"Support"> | string
  name?: Prisma.StringWithAggregatesFilter<"Support"> | string
  subject?: Prisma.StringWithAggregatesFilter<"Support"> | string
  description?: Prisma.StringWithAggregatesFilter<"Support"> | string
  status?: Prisma.StringWithAggregatesFilter<"Support"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Support"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Support"> | Date | string
}

export type SupportCreateInput = {
  email: string
  name: string
  subject: string
  description: string
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.CommentCreateNestedManyWithoutTicketInput
}

export type SupportUncheckedCreateInput = {
  id?: number
  email: string
  name: string
  subject: string
  description: string
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutTicketInput
}

export type SupportUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.CommentUpdateManyWithoutTicketNestedInput
}

export type SupportUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comments?: Prisma.CommentUncheckedUpdateManyWithoutTicketNestedInput
}

export type SupportCreateManyInput = {
  id?: number
  email: string
  name: string
  subject: string
  description: string
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SupportUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SupportUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SupportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SupportAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type SupportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SupportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  name?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SupportSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type SupportScalarRelationFilter = {
  is?: Prisma.SupportWhereInput
  isNot?: Prisma.SupportWhereInput
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type SupportCreateNestedOneWithoutCommentsInput = {
  create?: Prisma.XOR<Prisma.SupportCreateWithoutCommentsInput, Prisma.SupportUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.SupportCreateOrConnectWithoutCommentsInput
  connect?: Prisma.SupportWhereUniqueInput
}

export type SupportUpdateOneRequiredWithoutCommentsNestedInput = {
  create?: Prisma.XOR<Prisma.SupportCreateWithoutCommentsInput, Prisma.SupportUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.SupportCreateOrConnectWithoutCommentsInput
  upsert?: Prisma.SupportUpsertWithoutCommentsInput
  connect?: Prisma.SupportWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SupportUpdateToOneWithWhereWithoutCommentsInput, Prisma.SupportUpdateWithoutCommentsInput>, Prisma.SupportUncheckedUpdateWithoutCommentsInput>
}

export type SupportCreateWithoutCommentsInput = {
  email: string
  name: string
  subject: string
  description: string
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SupportUncheckedCreateWithoutCommentsInput = {
  id?: number
  email: string
  name: string
  subject: string
  description: string
  status: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SupportCreateOrConnectWithoutCommentsInput = {
  where: Prisma.SupportWhereUniqueInput
  create: Prisma.XOR<Prisma.SupportCreateWithoutCommentsInput, Prisma.SupportUncheckedCreateWithoutCommentsInput>
}

export type SupportUpsertWithoutCommentsInput = {
  update: Prisma.XOR<Prisma.SupportUpdateWithoutCommentsInput, Prisma.SupportUncheckedUpdateWithoutCommentsInput>
  create: Prisma.XOR<Prisma.SupportCreateWithoutCommentsInput, Prisma.SupportUncheckedCreateWithoutCommentsInput>
  where?: Prisma.SupportWhereInput
}

export type SupportUpdateToOneWithWhereWithoutCommentsInput = {
  where?: Prisma.SupportWhereInput
  data: Prisma.XOR<Prisma.SupportUpdateWithoutCommentsInput, Prisma.SupportUncheckedUpdateWithoutCommentsInput>
}

export type SupportUpdateWithoutCommentsInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SupportUncheckedUpdateWithoutCommentsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SupportCountOutputType
 */

export type SupportCountOutputType = {
  comments: number
}

export type SupportCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comments?: boolean | SupportCountOutputTypeCountCommentsArgs
}

/**
 * SupportCountOutputType without action
 */
export type SupportCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SupportCountOutputType
   */
  select?: Prisma.SupportCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SupportCountOutputType without action
 */
export type SupportCountOutputTypeCountCommentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommentWhereInput
}


export type SupportSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  name?: boolean
  subject?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comments?: boolean | Prisma.Support$commentsArgs<ExtArgs>
  _count?: boolean | Prisma.SupportCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["support"]>

export type SupportSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  name?: boolean
  subject?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["support"]>

export type SupportSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  name?: boolean
  subject?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["support"]>

export type SupportSelectScalar = {
  id?: boolean
  email?: boolean
  name?: boolean
  subject?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SupportOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "name" | "subject" | "description" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["support"]>
export type SupportInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comments?: boolean | Prisma.Support$commentsArgs<ExtArgs>
  _count?: boolean | Prisma.SupportCountOutputTypeDefaultArgs<ExtArgs>
}
export type SupportIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type SupportIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $SupportPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Support"
  objects: {
    comments: Prisma.$CommentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    email: string
    name: string
    subject: string
    description: string
    status: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["support"]>
  composites: {}
}

export type SupportGetPayload<S extends boolean | null | undefined | SupportDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SupportPayload, S>

export type SupportCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SupportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit' | 'relationLoadStrategy'> & {
    select?: SupportCountAggregateInputType | true
  }

export interface SupportDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Support'], meta: { name: 'Support' } }
  /**
   * Find zero or one Support that matches the filter.
   * @param {SupportFindUniqueArgs} args - Arguments to find a Support
   * @example
   * // Get one Support
   * const support = await prisma.support.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SupportFindUniqueArgs>(args: Prisma.SelectSubset<T, SupportFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Support that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SupportFindUniqueOrThrowArgs} args - Arguments to find a Support
   * @example
   * // Get one Support
   * const support = await prisma.support.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SupportFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SupportFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Support that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportFindFirstArgs} args - Arguments to find a Support
   * @example
   * // Get one Support
   * const support = await prisma.support.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SupportFindFirstArgs>(args?: Prisma.SelectSubset<T, SupportFindFirstArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Support that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportFindFirstOrThrowArgs} args - Arguments to find a Support
   * @example
   * // Get one Support
   * const support = await prisma.support.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SupportFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SupportFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Supports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Supports
   * const supports = await prisma.support.findMany()
   * 
   * // Get first 10 Supports
   * const supports = await prisma.support.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const supportWithIdOnly = await prisma.support.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SupportFindManyArgs>(args?: Prisma.SelectSubset<T, SupportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Support.
   * @param {SupportCreateArgs} args - Arguments to create a Support.
   * @example
   * // Create one Support
   * const Support = await prisma.support.create({
   *   data: {
   *     // ... data to create a Support
   *   }
   * })
   * 
   */
  create<T extends SupportCreateArgs>(args: Prisma.SelectSubset<T, SupportCreateArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Supports.
   * @param {SupportCreateManyArgs} args - Arguments to create many Supports.
   * @example
   * // Create many Supports
   * const support = await prisma.support.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SupportCreateManyArgs>(args?: Prisma.SelectSubset<T, SupportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Supports and returns the data saved in the database.
   * @param {SupportCreateManyAndReturnArgs} args - Arguments to create many Supports.
   * @example
   * // Create many Supports
   * const support = await prisma.support.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Supports and only return the `id`
   * const supportWithIdOnly = await prisma.support.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SupportCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SupportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Support.
   * @param {SupportDeleteArgs} args - Arguments to delete one Support.
   * @example
   * // Delete one Support
   * const Support = await prisma.support.delete({
   *   where: {
   *     // ... filter to delete one Support
   *   }
   * })
   * 
   */
  delete<T extends SupportDeleteArgs>(args: Prisma.SelectSubset<T, SupportDeleteArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Support.
   * @param {SupportUpdateArgs} args - Arguments to update one Support.
   * @example
   * // Update one Support
   * const support = await prisma.support.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SupportUpdateArgs>(args: Prisma.SelectSubset<T, SupportUpdateArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Supports.
   * @param {SupportDeleteManyArgs} args - Arguments to filter Supports to delete.
   * @example
   * // Delete a few Supports
   * const { count } = await prisma.support.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SupportDeleteManyArgs>(args?: Prisma.SelectSubset<T, SupportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Supports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Supports
   * const support = await prisma.support.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SupportUpdateManyArgs>(args: Prisma.SelectSubset<T, SupportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Supports and returns the data updated in the database.
   * @param {SupportUpdateManyAndReturnArgs} args - Arguments to update many Supports.
   * @example
   * // Update many Supports
   * const support = await prisma.support.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Supports and only return the `id`
   * const supportWithIdOnly = await prisma.support.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SupportUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SupportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Support.
   * @param {SupportUpsertArgs} args - Arguments to update or create a Support.
   * @example
   * // Update or create a Support
   * const support = await prisma.support.upsert({
   *   create: {
   *     // ... data to create a Support
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Support we want to update
   *   }
   * })
   */
  upsert<T extends SupportUpsertArgs>(args: Prisma.SelectSubset<T, SupportUpsertArgs<ExtArgs>>): Prisma.Prisma__SupportClient<runtime.Types.Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Supports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportCountArgs} args - Arguments to filter Supports to count.
   * @example
   * // Count the number of Supports
   * const count = await prisma.support.count({
   *   where: {
   *     // ... the filter for the Supports we want to count
   *   }
   * })
  **/
  count<T extends SupportCountArgs>(
    args?: Prisma.Subset<T, SupportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SupportCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Support.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SupportAggregateArgs>(args: Prisma.Subset<T, SupportAggregateArgs>): Prisma.PrismaPromise<GetSupportAggregateType<T>>

  /**
   * Group by Support.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SupportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SupportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SupportGroupByArgs['orderBy'] }
      : { orderBy?: SupportGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SupportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Support model
 */
readonly fields: SupportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Support.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SupportClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  comments<T extends Prisma.Support$commentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Support$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Support model
 */
export interface SupportFieldRefs {
  readonly id: Prisma.FieldRef<"Support", 'Int'>
  readonly email: Prisma.FieldRef<"Support", 'String'>
  readonly name: Prisma.FieldRef<"Support", 'String'>
  readonly subject: Prisma.FieldRef<"Support", 'String'>
  readonly description: Prisma.FieldRef<"Support", 'String'>
  readonly status: Prisma.FieldRef<"Support", 'String'>
  readonly createdAt: Prisma.FieldRef<"Support", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Support", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Support findUnique
 */
export type SupportFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * Filter, which Support to fetch.
   */
  where: Prisma.SupportWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support findUniqueOrThrow
 */
export type SupportFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * Filter, which Support to fetch.
   */
  where: Prisma.SupportWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support findFirst
 */
export type SupportFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * Filter, which Support to fetch.
   */
  where?: Prisma.SupportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Supports to fetch.
   */
  orderBy?: Prisma.SupportOrderByWithRelationInput | Prisma.SupportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Supports.
   */
  cursor?: Prisma.SupportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Supports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Supports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Supports.
   */
  distinct?: Prisma.SupportScalarFieldEnum | Prisma.SupportScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support findFirstOrThrow
 */
export type SupportFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * Filter, which Support to fetch.
   */
  where?: Prisma.SupportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Supports to fetch.
   */
  orderBy?: Prisma.SupportOrderByWithRelationInput | Prisma.SupportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Supports.
   */
  cursor?: Prisma.SupportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Supports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Supports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Supports.
   */
  distinct?: Prisma.SupportScalarFieldEnum | Prisma.SupportScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support findMany
 */
export type SupportFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * Filter, which Supports to fetch.
   */
  where?: Prisma.SupportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Supports to fetch.
   */
  orderBy?: Prisma.SupportOrderByWithRelationInput | Prisma.SupportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Supports.
   */
  cursor?: Prisma.SupportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Supports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Supports.
   */
  skip?: number
  distinct?: Prisma.SupportScalarFieldEnum | Prisma.SupportScalarFieldEnum[]
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support create
 */
export type SupportCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * The data needed to create a Support.
   */
  data: Prisma.XOR<Prisma.SupportCreateInput, Prisma.SupportUncheckedCreateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support createMany
 */
export type SupportCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Supports.
   */
  data: Prisma.SupportCreateManyInput | Prisma.SupportCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Support createManyAndReturn
 */
export type SupportCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * The data used to create many Supports.
   */
  data: Prisma.SupportCreateManyInput | Prisma.SupportCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Support update
 */
export type SupportUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * The data needed to update a Support.
   */
  data: Prisma.XOR<Prisma.SupportUpdateInput, Prisma.SupportUncheckedUpdateInput>
  /**
   * Choose, which Support to update.
   */
  where: Prisma.SupportWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support updateMany
 */
export type SupportUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Supports.
   */
  data: Prisma.XOR<Prisma.SupportUpdateManyMutationInput, Prisma.SupportUncheckedUpdateManyInput>
  /**
   * Filter which Supports to update
   */
  where?: Prisma.SupportWhereInput
  /**
   * Limit how many Supports to update.
   */
  limit?: number
}

/**
 * Support updateManyAndReturn
 */
export type SupportUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * The data used to update Supports.
   */
  data: Prisma.XOR<Prisma.SupportUpdateManyMutationInput, Prisma.SupportUncheckedUpdateManyInput>
  /**
   * Filter which Supports to update
   */
  where?: Prisma.SupportWhereInput
  /**
   * Limit how many Supports to update.
   */
  limit?: number
}

/**
 * Support upsert
 */
export type SupportUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * The filter to search for the Support to update in case it exists.
   */
  where: Prisma.SupportWhereUniqueInput
  /**
   * In case the Support found by the `where` argument doesn't exist, create a new Support with this data.
   */
  create: Prisma.XOR<Prisma.SupportCreateInput, Prisma.SupportUncheckedCreateInput>
  /**
   * In case the Support was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SupportUpdateInput, Prisma.SupportUncheckedUpdateInput>
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support delete
 */
export type SupportDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
  /**
   * Filter which Support to delete.
   */
  where: Prisma.SupportWhereUniqueInput
  relationLoadStrategy?: Prisma.RelationLoadStrategy
}

/**
 * Support deleteMany
 */
export type SupportDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Supports to delete
   */
  where?: Prisma.SupportWhereInput
  /**
   * Limit how many Supports to delete.
   */
  limit?: number
}

/**
 * Support.comments
 */
export type Support$commentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  where?: Prisma.CommentWhereInput
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  cursor?: Prisma.CommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[]
}

/**
 * Support without action
 */
export type SupportDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Support
   */
  select?: Prisma.SupportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Support
   */
  omit?: Prisma.SupportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SupportInclude<ExtArgs> | null
}
